import {
  Controller,
  Post,
  UseInterceptors,
  UploadedFile,
  UploadedFiles,
  UseGuards,
  Param,
  Delete,
  ParseIntPipe,
  BadRequestException,
} from '@nestjs/common';
import { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';
import { JwtGuard } from '../auth/guards/jwt.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UploadsService } from './uploads.service';
import { DatosFormImagenesService } from '../datos-form/services/datos-form-imagenes.service';
import { GetUser } from '../auth/decorators/get-user.decorator';

// Define the ImagenForm interface to match the Prisma model
export interface ImagenForm {
  id: number;
  url: string;
  descripcion: string | null;
  datosFormId: number;
  createdAt: Date;
}

@UseGuards(JwtGuard, RolesGuard)
@Controller('uploads')
export class UploadsController {
  constructor(
    private uploadsService: UploadsService,
    private datosFormImagenesService: DatosFormImagenesService,
  ) {}

  @Post('single/:formId')
  @Roles('ADMIN', 'MODERADOR', 'OPERADOR')
  @UseInterceptors(FileInterceptor('file'))
  async uploadSingleFile(
    @UploadedFile() file: Express.Multer.File,
    @Param('formId', ParseIntPipe) formId: number,
    @GetUser('id') userId: string,
  ): Promise<ImagenForm> {
    if (!file) {
      throw new BadRequestException('No se ha proporcionado ningún archivo');
    }

    const url = this.uploadsService.getFileUrl(file.filename);    
    return this.datosFormImagenesService.addImageToForm(formId, {
      url,
      descripcion: '',
    }, userId);
  }

  @Post('multiple/:formId')
  @Roles('ADMIN', 'MODERADOR', 'OPERADOR')
  @UseInterceptors(FilesInterceptor('files', 6)) // Max 6 files
  async uploadMultipleFiles(
    @UploadedFiles() files: Express.Multer.File[],
    @Param('formId', ParseIntPipe) formId: number,
    @GetUser('id') userId: string,
  ): Promise<ImagenForm[]> {
    if (!files || files.length === 0) {
      throw new BadRequestException('No se ha proporcionado ningún archivo');
    }

    const currentImages = await this.datosFormImagenesService.getFormImages(formId);
    if (currentImages.length + files.length > 6) {
      throw new BadRequestException(
        'El formulario no puede tener más de 6 imágenes en total',
      );
    }

    const results: ImagenForm[] = [];
    for (const file of files) {
      const url = this.uploadsService.getFileUrl(file.filename);
      const image = await this.datosFormImagenesService.addImageToForm(formId, {
        url,
        descripcion: '',
      }, userId);
      results.push(image as ImagenForm);
    }

    return results;
  }

  @Delete('image/:imageId')
  @Roles('ADMIN', 'MODERADOR')
  async deleteImage(
    @Param('imageId', ParseIntPipe) imageId: number,
    @GetUser('id') userId: string,
  ): Promise<{ message: string }> {
    return this.datosFormImagenesService.deleteImage(imageId, userId);
  }
}
